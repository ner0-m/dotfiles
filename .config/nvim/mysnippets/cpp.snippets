# We want to overwrite everything in parent ft.
priority 1

snippet class "Create a class" b
class ${1:} {
};
endsnippet

snippet struct "Create a struct" b
struct ${1:} {
};
endsnippet

snippet lambda "add a lambda"
[${1}]${2:(${3:params})} {
    ${0:${VISUAL:}}
};
endsnippet

snippet #inc "Include header"
#include "${1:header}"
endsnippet

snippet #incstd "Include stdlib header"
#include <${1:stdheader}>
endsnippet

snippet //cf "clang-format on/off"
// clang-format off
${0:${VISUAL:}}
// clang-format on
endsnippet
snippet //co "clang-format on/off"
// clang-format off
${0:${VISUAL:}}
// clang-format on
endsnippet
snippet //clang "clang-format on/off"
// clang-format off
${0:${VISUAL:}}
// clang-format on
endsnippet

#
# casts
#
snippet scast "static_cast"
static_cast<${1:type}>(${2:${VISUAL}})$0
endsnippet

snippet ccast "const_cast"
const_cast<${1:type}>(${2:${VISUAL}})$0
endsnippet

snippet dcast "dynamic_cast"
dynamic_cast<${1:type}>(${2:${VISUAL}})$0
endsnippet

snippet rcast "reinterpret_cast"
reinterpret_cast<${1:type}>(${2:${VISUAL}})$0
endsnippet

#
# standard library stuff
#

#
# memory library
#
snippet up "unique pointer"
std::unique_ptr<${1:type}> ${2:${VISUAL}}
endsnippet

snippet toup "Convert raw pointer to unique_ptr" i
std::unique_ptr<${1:`!p
snip.rv = snip.v.text.strip("*") or "klass"
`}>
endsnippet

snippet mu "make unique pointer"
std::make_unique<$1>(${2:var})
endsnippet

snippet sp "shared pointer"
std::shared_ptr<$1> ${2:var}
endsnippet

snippet tosp "Convert raw pointer to shared_ptr" i
std::shared_ptr<${1:`!p
snip.rv = snip.v.text.strip("*") or "klass"
`}>

snippet ms "make shared pointer"
std::make_shared<$1>(${2:var})
endsnippet

#
# container library
#
snippet std::vec "std::vector with type and name"
std::vector<${1:T}> ${2:name}
endsnippet

snippet std::vecallov "std::vector with type, allocator and name"
std::vector<${1:T}, ${1:allocator}> ${3:name}
endsnippet

snippet std::array "Insert std::array"
std::vector<${1:T},${2:size}> ${3:name}
endsnippet

snippet std::deque "Insert std::deque"
std::deque<${1:T}> ${2:name}
endsnippet

snippet std::forward_list "I"
std::forward_list<${1:T}> ${2:name}
endsnippet

snippet std::list ""
std::list <${1:T}> ${2:name}
endsnippet

snippet std::set ""
std::set<${1:Key}> ${2:name}
endsnippet

snippet std::multiset ""
std::multiset<${1:Key}> ${2:name}
endsnippet

snippet std::unordered_set ""
std::unordered_set<${1:Key}> ${2:name}
endsnippet

snippet std::unordered_multiset ""
std::unordered_multiset<${1:Key}> ${2:name}
endsnippet

snippet std::map ""
std::map<${1:Key}, ${2:T}> ${2:name}
endsnippet

snippet std::multimap ""
std::multimap<${1:Key}, ${2:T}> ${2:name}
endsnippet

snippet std::unordered_multimap ""
std::unordered_multimap<${1:Key}, ${2:T}> ${2:name}
endsnippet

snippet std::stack ""
std::stack<${1:T}> ${2:name}
endsnippet

snippet std::queue ""
std::queue<${1:T}> ${2:name}
endsnippet

snippet std::priority_queue ""
std::priority_queue<${1:T}> ${2:name}
endsnippet

snippet std::span ""
std::span<${1:T}> ${2:name}
endsnippet

#
# Algorithm library snippets
#

snippet std::all_of ""
std::all_of(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::ranges::all_of ""
std::ranges::all_of(${1:range}, ${2:predicate})
endsnippet

snippet std::any_of ""
std::any_of(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::ranges::any_of ""
std::ranges::any_of(${1:range}, ${2:predicate})
endsnippet

snippet std::none_of ""
std::none_of(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::ranges::none_of ""
std::ranges::none_of(${1:range}, ${2:predicate})
endsnippet

snippet std::for_each ""
std::for_each(${1:first}, ${2:last}, ${3:func})
endsnippet

snippet std::ranges::for_each ""
std::ranges::for_each(${1:range}, ${2:func})
endsnippet

snippet std::for_each_n ""
std::for_each_n(${1:first}, ${2:n}, ${3:func})
endsnippet

snippet std::ranges::for_each_n ""
std::ranges::for_each_n(${1:first}, ${2:n}, ${3:func})
endsnippet

snippet std::count ""
std::count(${1:first}, ${2:last}, ${3:val})
endsnippet

snippet std::count_if ""
std::count_if(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::ranges::count ""
std::ranges::count(${1:range}, ${2:val})
endsnippet

snippet std::ranges::count_if ""
std::ranges::count_if(${1:range}, ${2:predicate})
endsnippet

snippet std::mismatch ""
std::mismatch(${1:first1}, ${2:last1}, ${3:first2})
endsnippet

snippet std::find ""
std::find(${1:first}, ${2:last}, ${3:val})
endsnippet

snippet std::find_if ""
std::find_if(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::find_if_not ""
std::find_if_not(${1:first}, ${2:last}, ${3:predicate})
endsnippet

snippet std::find_end ""
std::find_end(${1:first}, ${2:last}, ${3:s_first}, ${4:s_fast})
endsnippet

snippet std::find_first_of ""
std::find_first_of(${1:first}, ${2:last}, ${3:s_first}, ${4:s_fast})
endsnippet

snippet std::ranges::find ""
std::ranges::find(${1:range}, ${3:val})
endsnippet

snippet std::ranges::find_if ""
std::ranges::find_if(${1:range}, ${3:predicate})
endsnippet

snippet std::ranges::find_if_not ""
std::ranges::find_if_not(${1:range}, ${3:predicate})
endsnippet

snippet std::ranges::find_end ""
std::ranges::find_end(${1:range1}, ${2:range2})
endsnippet

snippet std::ranges::find_first_of ""
std::ranges::find_first_of(${1:range1}, ${2:range2})
endsnippet

snippet std::adjacent_find ""
std::adjacent_find(${1:first}, ${2:last}${3:, ${4:bin_predicate}})
endsnippet

snippet std::ranges::adjacent_find ""
std::ranges::adjacent_find(${1:range}${2:, ${3:bin_predicate}})
endsnippet

snippet std::search ""
std::search(${1:first}, ${2:last}, ${3:s_first}, ${4:s_fast}${5:, ${6:bin_predicate}})
endsnippet

snippet std::search_n ""
std::search_n(${1:first}, ${2:last}, ${3:count}, ${4:value}${5:, ${6:bin_predicate}})
endsnippet

snippet std::ranges::search ""
std::ranges::search(${1:range}, ${2:range2}${3:, ${4:bin_predicate}})
endsnippet

snippet std::ranges::search_n ""
std::ranges::search_n(${1:range}, ${2:count}, ${3:value}${4:, ${5:bin_predicate}})
endsnippet

snippet std::copy "std::copy"
std::copy(${1:first}, ${2:last}, ${3:outfirst})$0
endsnippet

snippet std::copy_if "std::copy_if"
std::copy_if(${1:first}, ${2:last}, ${3:outfirst}, ${4:predicate})$0
endsnippet

snippet std::ranges::copy "std::ranges::copy"
std::ranges::copy(${1:range}, ${2:out})$0
endsnippet

snippet std::ranges::copy_if "std::ranges::copy_if"
std::ranges::copy_if(${1:range}, ${2:out}, ${r:predicate})$0
endsnippet

snippet std::copy_n "std::copy_n"
std::copy_n(${1:first}, ${2:last}, ${3:count}, ${4:result})$0
endsnippet

snippet std::ranges::copy_n "std::ranges::copy_n"
std::ranges::copy_n(${1:range}, ${2:count}, ${3:result})$0
endsnippet

snippet std::copy_backward "std::copy_backward"
std::copy_backward(${1:first}, ${2:last}, ${3:res_last})$0
endsnippet

snippet std::ranges::copy_backward "std::ranges::copy_backward"
std::ranges::copy_backward(${1:range}, ${3:res})$0
endsnippet

snippet std::move "std::move"
std::move(${1:first}, ${2:last}, ${3:out_first})$0
endsnippet

snippet std::ranges::move "std::ranges::move"
std::ranges::move(${1:range}, ${2:out})$0
endsnippet

snippet std:: "std::"
std::(${1:first}, ${2:last})$0
endsnippet

snippet std:: "std::"
std::(${1:first}, ${2:last}, ${3:predicate})$0
endsnippet

snippet std:: ""
std::
endsnippet
