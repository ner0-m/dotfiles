# struct
snippet st
struct ${1:StructName} {
	$2
};
$0
endsnippet

# class
snippet cl
class ${1:ClassName} {
	$2
};
$0
endsnippet

# for loops
# for std::size_t
snippet for
for (std::size_t ${1:i} = 0; $1 < ${2:size}; ++$1) {
	$3
}
$0
endsnippet

# for int
snippet fori
for (int ${1:i} = 0; $1 < ${2:size}; ++$1) {
	$3
}
$0
endsnippet

# for each
snippet fore
for (${1:auto}& ${2:e} : ${3:container}) {
	$4
}
$0
endsnippet

# for iterator
snippet forit
for (${1:auto} ${2:it} = ${3:container}.begin(); $2 != $3.end(); ++$2) {
	$4
}
$0
endsnippet

# switch
snippet sw
switch (${1}) {
	case ${2}:
		${3}
		break;
	${4}
}
$0
endsnippet

# case
snippet case
case ${1}:
	$2
	break;
$0
endsnippet

# guard
snippet guard
#ifndef ${2:`!v substitute(expand('%:t:r'),'.*','\U&\E','')`_H}
#define $2

$0

#endif /* $2 */
endsnippet

# print line
snippet pl
std::cout << ${1} << std::endl;
$0
endsnippet

# print line string
snippet pls
std::cout << "${1}" << std::endl;
$0
endsnippet

# print string
snippet ps
std::cout << "${1}";
$0
endsnippet

# print
snippet p
std::cout << ${1};
$0
endsnippet

# pendl
snippet pendl
std::cout << std::endl;
$0
endsnippet

#pflush
snippet pflush
std::cout << std::flush;
$0
endsnippet

# function definition
snippet fun
${1:void} ${2:function}(${3}) {
	${4}
}
$0
endsnippet

# function declaration
snippet fund
${1:void} ${2:function}(${3}); 
$0
endsnippet

# include
snippet inc
#include <${1}>
$0
endsnippet

# include
snippet incn
#include "${1}"
$0
endsnippet

# namespace
snippet ns
namespace ${1} {
${2}
}
$0
endsnippet

# using namespace
snippet uns
using namespace ${1};
$0
endsnippet

# template
snippet tp
template <typename ${1:T}>
$0
endsnippet

# main
snippet main
int main() {
	
	$0

	return 0;
}
endsnippet

# main with arguments
snippet maina
int main(int argc, char **argv) {

	$0
	
	return 0;
}
endsnippet

